generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("DATABASE_URL")
}

model User {
   id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name              String
   email             String             @unique
   password          String
   created_at        DateTime           @default(now())
   updated_at        DateTime           @updatedAt
   access_history    AccessHitory[]
   //user_bank         UserBank[]
   recommended_stock RecommendedStock[]
   group_role        GroupRole?
   Expenses          Expenses[]

   @@map("users")
}

model AccessHitory {
   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   user_id    String?  @db.Uuid
   status     Boolean
   created_at DateTime @default(now())
   User       User?    @relation(fields: [user_id], references: [id])

   @@map("access_historie")
}

//model Bank {
//   id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   name       String
//   deleted    Boolean?
//   created_at DateTime     @default(now())
//   deleted_at DateTime?
//   user_bank  UserBank[]
//   Investment Investment[]
//   Expenses   Expenses[]

//   @@map("banks")
//}

//model UserBank {
//   id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   user_id    String   @db.Uuid
//   bank_id    String   @db.Uuid
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   bank       Bank     @relation(fields: [bank_id], references: [id])
//   user       User     @relation(fields: [user_id], references: [id])

//   @@map("users_banks")
//}

model Investment {
   id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   transaction_date DateTime
   asset_name       String
   asset_type       String
   amount           Int
   price            Decimal
   //bank_id          String   @db.Uuid
   created_at       DateTime @default(now())
   //bank             Bank     @relation(fields: [bank_id], references: [id])

   @@map("investiments")
}

model stock {
   id            String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   Papel         String
   Cotacao       Decimal
   PL            Decimal
   PV            Decimal
   PSR           Decimal
   DivYield      Decimal
   PAtivo        Decimal
   PCapGiro      Decimal
   PEBIT         Decimal
   PAtivCircLiq  Decimal
   EVEBIT        Decimal
   EVEBITDA      Decimal
   MrgEbit       Decimal
   MrgLiq        Decimal
   LiqCorr       Decimal
   ROIC          Decimal
   ROE           Decimal
   Liq2meses     Decimal
   PatrimLiq     Decimal
   DivBrutPatrim Decimal
   CrescRec5a    Decimal
   created_at    DateTime           @default(now())
   stock         RecommendedStock[]

   @@map("stocks")
}

model RecommendedStock {
   id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   stock_id      String   @db.Uuid
   user_id       String   @db.Uuid
   justification String   @db.Text
   created_at    DateTime @default(now())
   stock         stock    @relation(fields: [stock_id], references: [id])
   user          User     @relation(fields: [user_id], references: [id])

   @@map("recommeded_stock")
}

model Role {
   id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name       String
   deleted    Boolean     @default(false)
   created_at DateTime    @default(now())
   deleted_at DateTime?
   GroupRole  GroupRole[]

   @@map("roles")
}

model GroupRole {
   id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   role_id    String    @db.Uuid
   user_id    String    @unique @db.Uuid
   deleted    Boolean   @default(false)
   created_at DateTime  @default(now())
   updated_at DateTime  @default(now()) @updatedAt
   deleted_at DateTime?
   role       Role      @relation(fields: [role_id], references: [id])
   user       User      @relation(fields: [user_id], references: [id])

   @@map("group_roles")
}

model Category {
   id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name       String
   deleted    Boolean?
   created_at DateTime   @default(now())
   updated_at DateTime   @updatedAt
   deleted_at DateTime?
   Expenses   Expenses[]

   @@map("categories")
}

//model TypePayment {
//   id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   type_payment String
//   created_at   DateTime
//   updated_at   DateTime
//   deleted_at   DateTime
//   Expenses     Expenses[]

//   @@map("types_payments")
//}

model Expenses {
   id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
   name         String
   category_id  String      @db.Uuid
   user_id      String      @db.Uuid
   expense      Decimal
   month        String?
   payment_date DateTime
   payment_type PaymentType
   bank         Bank
   created_at   DateTime    @default(now())
   updated_at   DateTime    @updatedAt
   deleted_at   DateTime?
   category     Category    @relation(fields: [category_id], references: [id], onDelete: Cascade)
   user         User        @relation(fields: [user_id], references: [id])
   //TypePayment  TypePayment @relation(fields: [type_payment_id], references: [id])
   //Bank            Bank        @relation(fields: [bank_id], references: [id])

   @@map("expenses")
}

enum PaymentType {
   DEBITO
   CREDITO
   PIX
   TED
}

enum Bank {
   BRADESCO
   NUBANK
}
